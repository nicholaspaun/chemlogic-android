package ca.nicholaspaun.chemlogic.prolog;

import jp.ac.kobe_u.cs.prolog.lang.*;
import jp.ac.kobe_u.cs.prolog.builtin.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>capital/2</code> defined in stupid.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
public class PRED_capital_2 extends Predicate {
    static SymbolTerm s1 = SymbolTerm.makeSymbol("canada");
    static SymbolTerm s2 = SymbolTerm.makeSymbol("ottawa");
    static SymbolTerm s3 = SymbolTerm.makeSymbol("us");
    static SymbolTerm s4 = SymbolTerm.makeSymbol("washington");
    static SymbolTerm s5 = SymbolTerm.makeSymbol("japan");
    static SymbolTerm s6 = SymbolTerm.makeSymbol("tokyo");
    static SymbolTerm s7 = SymbolTerm.makeSymbol("finland");
    static SymbolTerm s8 = SymbolTerm.makeSymbol("helsinki");
    static Predicate _fail_0 = new PRED_fail_0();
    static Predicate _capital_2_var = new PRED_capital_2_var();
    static Predicate _capital_2_var_1 = new PRED_capital_2_var_1();
    static Predicate _capital_2_var_2 = new PRED_capital_2_var_2();
    static Predicate _capital_2_var_3 = new PRED_capital_2_var_3();
    static Predicate _capital_2_con = new PRED_capital_2_con();
    static Predicate _capital_2_1 = new PRED_capital_2_1();
    static Predicate _capital_2_2 = new PRED_capital_2_2();
    static Predicate _capital_2_3 = new PRED_capital_2_3();
    static Predicate _capital_2_4 = new PRED_capital_2_4();
    static java.util.Hashtable<Term, Predicate> con = new java.util.Hashtable<Term, Predicate>(4);
    static {
        con.put(s1, _capital_2_1);
        con.put(s3, _capital_2_2);
        con.put(s5, _capital_2_3);
        con.put(s7, _capital_2_4);
    }

    public Term arg1, arg2;

    public PRED_capital_2(Term a1, Term a2, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        this.cont = cont;
    }

    public PRED_capital_2(){}

    public void setArgument(Term[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        this.cont = cont;
    }

    public int arity() { return 2; }

    public String toString() {
        return "capital(" + arg1 + "," + arg2 + ")";
    }

    public Predicate exec(Prolog engine) {
        engine.aregs[1] = arg1;
        engine.aregs[2] = arg2;
        engine.cont = cont;
        engine.setB0();
        return engine.switch_on_term(_capital_2_var, _fail_0, _fail_0, _capital_2_con, _fail_0, _fail_0);
    }
}

class PRED_capital_2_var extends PRED_capital_2 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_capital_2_1, _capital_2_var_1);
    }
}

class PRED_capital_2_var_1 extends PRED_capital_2 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_capital_2_2, _capital_2_var_2);
    }
}

class PRED_capital_2_var_2 extends PRED_capital_2 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_capital_2_3, _capital_2_var_3);
    }
}

class PRED_capital_2_var_3 extends PRED_capital_2 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_capital_2_4);
    }
}

class PRED_capital_2_con extends PRED_capital_2 {
    public Predicate exec(Prolog engine) {
        return engine.switch_on_hash(con, _fail_0);
    }
}

class PRED_capital_2_1 extends PRED_capital_2 {
    public Predicate exec(Prolog engine) {
    // capital(canada,ottawa):-true
        Term a1, a2;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        cont = engine.cont;
    // capital(canada,ottawa):-[]
        a1 = a1.dereference();
        if (a1.isSymbol()){
            if (! a1.equals(s1))
                return engine.fail();
        } else if (a1.isVariable()){
            ((VariableTerm) a1).bind(s1, engine.trail);
        } else {
            return engine.fail();
        }
        a2 = a2.dereference();
        if (a2.isSymbol()){
            if (! a2.equals(s2))
                return engine.fail();
        } else if (a2.isVariable()){
            ((VariableTerm) a2).bind(s2, engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_capital_2_2 extends PRED_capital_2 {
    public Predicate exec(Prolog engine) {
    // capital(us,washington):-true
        Term a1, a2;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        cont = engine.cont;
    // capital(us,washington):-[]
        a1 = a1.dereference();
        if (a1.isSymbol()){
            if (! a1.equals(s3))
                return engine.fail();
        } else if (a1.isVariable()){
            ((VariableTerm) a1).bind(s3, engine.trail);
        } else {
            return engine.fail();
        }
        a2 = a2.dereference();
        if (a2.isSymbol()){
            if (! a2.equals(s4))
                return engine.fail();
        } else if (a2.isVariable()){
            ((VariableTerm) a2).bind(s4, engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_capital_2_3 extends PRED_capital_2 {
    public Predicate exec(Prolog engine) {
    // capital(japan,tokyo):-true
        Term a1, a2;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        cont = engine.cont;
    // capital(japan,tokyo):-[]
        a1 = a1.dereference();
        if (a1.isSymbol()){
            if (! a1.equals(s5))
                return engine.fail();
        } else if (a1.isVariable()){
            ((VariableTerm) a1).bind(s5, engine.trail);
        } else {
            return engine.fail();
        }
        a2 = a2.dereference();
        if (a2.isSymbol()){
            if (! a2.equals(s6))
                return engine.fail();
        } else if (a2.isVariable()){
            ((VariableTerm) a2).bind(s6, engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_capital_2_4 extends PRED_capital_2 {
    public Predicate exec(Prolog engine) {
    // capital(finland,helsinki):-true
        Term a1, a2;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        cont = engine.cont;
    // capital(finland,helsinki):-[]
        a1 = a1.dereference();
        if (a1.isSymbol()){
            if (! a1.equals(s7))
                return engine.fail();
        } else if (a1.isVariable()){
            ((VariableTerm) a1).bind(s7, engine.trail);
        } else {
            return engine.fail();
        }
        a2 = a2.dereference();
        if (a2.isSymbol()){
            if (! a2.equals(s8))
                return engine.fail();
        } else if (a2.isVariable()){
            ((VariableTerm) a2).bind(s8, engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}
